import{o as n,c as s,a}from"./app.5202dc78.js";const t='{"title":"","description":"","frontmatter":{},"relativePath":"projects/Crypto/crypto/__main__.md","lastUpdated":1617051445748}',p={},e=a('<p>FILE: <strong>main</strong>.py PROJECT: crypto PROGRAMMER: Samuel Lagunju DESCRIPTION: This file is the main for the module</p><div class="language-python"><pre><code>\n\n<span class="token keyword">import</span> sys\n<span class="token keyword">from</span> crypter <span class="token keyword">import</span> Crypter\n<span class="token keyword">from</span> strategy <span class="token keyword">import</span> SeanStrategy\n<span class="token keyword">from</span> fileio <span class="token keyword">import</span> read_file<span class="token punctuation">,</span> write_file<span class="token punctuation">,</span> validate_file<span class="token punctuation">,</span> check_write<span class="token punctuation">,</span> convert_ext\n<span class="token keyword">from</span> helpers <span class="token keyword">import</span> arg_parser\n\n\n\n</code></pre></div><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n</code></pre></div><p>Not completely sure I might need to implement. program_directory = Path().resolve() program_os = os_checker() if not program_os: sys.exit(SYS_ERROR)</p><div class="language-python"><pre><code>\n    args <span class="token operator">=</span> arg_parser<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n\n</code></pre></div><p>If there are files to be decrypted</p><div class="language-python"><pre><code>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>decrypt_file<span class="token punctuation">:</span>\n        <span class="token keyword">for</span> file_name <span class="token keyword">in</span> args<span class="token punctuation">.</span>decrypt_file<span class="token punctuation">:</span>\n            <span class="token keyword">if</span> validate_file<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n</code></pre></div><p>If the user&#39;s input is valid, process with encryption</p><div class="language-python"><pre><code>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Decrypting file: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                crypter <span class="token operator">=</span> Crypter<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> SeanStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n</code></pre></div><p>All FileIO operations</p><div class="language-python"><pre><code>                <span class="token keyword">try</span><span class="token punctuation">:</span>\n                    file_contents <span class="token operator">=</span> read_file<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>\n                    decrypted_text <span class="token operator">=</span> crypter<span class="token punctuation">.</span>decrypt_txt<span class="token punctuation">(</span>file_contents<span class="token punctuation">)</span>\n                    write_file<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> decrypted_text<span class="token punctuation">)</span>\n                    check_write<span class="token punctuation">(</span>decrypted_text<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>\n                    new_file <span class="token operator">=</span> convert_ext<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>\n                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Decrypted File: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>new_file<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>\n                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to write to: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">else</span><span class="token punctuation">:</span>\n                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Input {0} was not a valid file.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\n</code></pre></div><p>If there are files to be encrypted</p><div class="language-python"><pre><code>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>encrypt_file<span class="token punctuation">:</span>\n        <span class="token keyword">for</span> file_name <span class="token keyword">in</span> args<span class="token punctuation">.</span>encrypt_file<span class="token punctuation">:</span>\n\n</code></pre></div><p>If the user&#39;s input is valid, process with encryption</p><div class="language-python"><pre><code>            <span class="token keyword">if</span> validate_file<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n</code></pre></div><p>If the user&#39;s input is valid, process with encryption</p><div class="language-python"><pre><code>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Encrypting file: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                crypter <span class="token operator">=</span> Crypter<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> SeanStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n</code></pre></div><p>All FileIO operations</p><div class="language-python"><pre><code>                <span class="token keyword">try</span><span class="token punctuation">:</span>\n                    file_contents <span class="token operator">=</span> read_file<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>\n                    encrypted_text <span class="token operator">=</span> crypter<span class="token punctuation">.</span>encrypt_txt<span class="token punctuation">(</span>file_contents<span class="token punctuation">)</span>\n                    write_file<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> encrypted_text<span class="token punctuation">)</span>\n                    check_write<span class="token punctuation">(</span>encrypted_text<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>\n                    new_file <span class="token operator">=</span> convert_ext<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>\n                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Encrypted File: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>new_file<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>\n                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to write to: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">else</span><span class="token punctuation">:</span>\n                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Input {0} was not a valid file.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>\n    main<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\n</code></pre></div>',19);p.render=function(a,t,p,o,c,i){return n(),s("div",null,[e])};export default p;export{t as __pageData};
