import{o as n,c as s,d as a}from"./app.50dbb70a.js";const t='{"title":"","description":"","frontmatter":{},"relativePath":"projects/Crypto/crypto/crypter.md","lastUpdated":1619456284419}',p={},o=a('<p>PROJECT : Crypto FILE : <a href="http://crypter.py" target="_blank" rel="noopener noreferrer">crypter.py</a> PROGRAMMER : Samuel Lagunju DATE : 2020-08-19 DESCRIPTION : This file contains the class Crypter.</p><div class="language-python"><pre><code>\n<span class="token keyword">import</span> os\n<span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple\n<span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Callable<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> Literal\n\n<span class="token keyword">from</span> <span class="token punctuation">.</span>strategy <span class="token keyword">import</span> Strategy<span class="token punctuation">,</span> SeanStrategy<span class="token punctuation">,</span> RubikStrategy\n<span class="token keyword">from</span> <span class="token punctuation">.</span>constants <span class="token keyword">import</span> image_key\n\n<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> fileio <span class="token keyword">as</span> _fileio\n\nCrypterVariant <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span>\n    <span class="token string">&quot;CrypterVariant&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;read_func&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;write_func&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;strategy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;operation&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span>\next_mapping <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;.txt&quot;</span><span class="token punctuation">:</span> CrypterVariant<span class="token punctuation">(</span>\n        _fileio<span class="token punctuation">.</span>read_text_file<span class="token punctuation">,</span> _fileio<span class="token punctuation">.</span>write_text_file<span class="token punctuation">,</span> SeanStrategy<span class="token punctuation">,</span> <span class="token string">&quot;encrypt&quot;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;.crp&quot;</span><span class="token punctuation">:</span> CrypterVariant<span class="token punctuation">(</span>\n        _fileio<span class="token punctuation">.</span>read_text_file<span class="token punctuation">,</span> _fileio<span class="token punctuation">.</span>write_text_file<span class="token punctuation">,</span> SeanStrategy<span class="token punctuation">,</span> <span class="token string">&quot;decrypt&quot;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">:</span> CrypterVariant<span class="token punctuation">(</span>\n        _fileio<span class="token punctuation">.</span>read_binary_file<span class="token punctuation">,</span> _fileio<span class="token punctuation">.</span>write_binary_file<span class="token punctuation">,</span> RubikStrategy<span class="token punctuation">,</span> <span class="token string">&quot;encrypt&quot;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;.cip&quot;</span><span class="token punctuation">:</span> CrypterVariant<span class="token punctuation">(</span>\n        _fileio<span class="token punctuation">.</span>read_binary_file<span class="token punctuation">,</span> _fileio<span class="token punctuation">.</span>write_binary_file<span class="token punctuation">,</span> RubikStrategy<span class="token punctuation">,</span> <span class="token string">&quot;decrypt&quot;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n\n\n</code></pre></div><p>NAME : CrypterFactory PURPOSE : This class is used to create the appropriate Crypter class, given a file name. Produce families of related objects without specifying their concrete classes.</p><div class="language-python"><pre><code><span class="token keyword">class</span> <span class="token class-name">CrypterFactory</span><span class="token punctuation">:</span>\n\n</code></pre></div><div class="language-python"><pre><code>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mapping<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> CrypterVariant<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> mapping <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n            mapping <span class="token operator">=</span> ext_mapping\n\n        self<span class="token punctuation">.</span>mapping <span class="token operator">=</span> mapping\n\n\n</code></pre></div><div class="language-python"><pre><code>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        variants <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>\n            variants<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mapping<span class="token punctuation">[</span><span class="token builtin">file</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">for</span> variant <span class="token keyword">in</span> variants<span class="token punctuation">:</span>\n            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Crypter<span class="token punctuation">(</span>variant<span class="token punctuation">.</span>strategy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> variant<span class="token punctuation">.</span>read_func<span class="token punctuation">,</span> variant<span class="token punctuation">.</span>write_func<span class="token punctuation">,</span> variant<span class="token punctuation">.</span>operation<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> result\n\n\n\n</code></pre></div><p>NAME : Crypter PURPOSE : The Crypter class has been created to encrypt or decrypt files.</p><div class="language-python"><pre><code><span class="token keyword">class</span> <span class="token class-name">Crypter</span><span class="token punctuation">:</span>\n\n</code></pre></div><div class="language-python"><pre><code>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>\n            self<span class="token punctuation">,</span>\n            strategy<span class="token punctuation">:</span> Strategy<span class="token punctuation">,</span>\n            read_func<span class="token punctuation">:</span> Callable<span class="token punctuation">,</span>\n            write_func<span class="token punctuation">:</span> Callable<span class="token punctuation">,</span>\n            operation<span class="token punctuation">:</span> Literal<span class="token punctuation">[</span><span class="token string">&quot;encrypt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;decrypt&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy\n        self<span class="token punctuation">.</span>read_func <span class="token operator">=</span> read_func\n        self<span class="token punctuation">.</span>write_func <span class="token operator">=</span> write_func\n        self<span class="token punctuation">.</span>operation <span class="token operator">=</span> operation\n\n\n</code></pre></div><p>Consumes a file name and produces a new file name.</p><div class="language-python"><pre><code>    <span class="token keyword">def</span> <span class="token function">convert_ext</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> file_name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>\n</code></pre></div><div class="language-python"><pre><code>        ext_pairs <span class="token operator">=</span> self<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>get_supported_types<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        file_stem<span class="token punctuation">,</span> file_extension <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>\n\n        new_file_name <span class="token operator">=</span> <span class="token boolean">None</span>\n        <span class="token keyword">for</span> pair <span class="token keyword">in</span> ext_pairs<span class="token punctuation">:</span>\n            <span class="token keyword">if</span> file_extension <span class="token keyword">in</span> pair<span class="token punctuation">:</span>\n                <span class="token keyword">if</span> self<span class="token punctuation">.</span>operation <span class="token operator">==</span> <span class="token string">&quot;decrypt&quot;</span><span class="token punctuation">:</span>\n                    new_file_name <span class="token operator">=</span> file_stem <span class="token operator">+</span> pair<span class="token punctuation">.</span>decrypted\n                <span class="token keyword">else</span><span class="token punctuation">:</span>\n                    new_file_name <span class="token operator">=</span> file_stem <span class="token operator">+</span> pair<span class="token punctuation">.</span>encrypted\n\n        <span class="token keyword">if</span> new_file_name <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>\n                <span class="token string-interpolation"><span class="token string">f&quot;Strategy </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>strategy<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string"> does not support extension </span><span class="token interpolation"><span class="token punctuation">{</span>file_extension<span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span>\n            <span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> new_file_name\n\n\n</code></pre></div><p>Encrypts or decrypts the given files.</p><div class="language-python"><pre><code>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n</code></pre></div><div class="language-python"><pre><code>        <span class="token keyword">try</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Reading content from: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            strategy <span class="token operator">=</span> self<span class="token punctuation">.</span>strategy\n            file_contents <span class="token operator">=</span> self<span class="token punctuation">.</span>read_func<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n\n            <span class="token keyword">if</span> self<span class="token punctuation">.</span>operation <span class="token operator">==</span> <span class="token string">&quot;encrypt&quot;</span><span class="token punctuation">:</span>\n                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Encrypting: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                return_text <span class="token operator">=</span> strategy<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>file_contents<span class="token punctuation">)</span>\n            <span class="token keyword">else</span><span class="token punctuation">:</span>\n                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Decrypting: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                return_text <span class="token operator">=</span> strategy<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>file_contents<span class="token punctuation">)</span>\n\n            new_file <span class="token operator">=</span> self<span class="token punctuation">.</span>convert_ext<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n\n</code></pre></div><p>Write File contents</p><div class="language-python"><pre><code>            self<span class="token punctuation">.</span>write_func<span class="token punctuation">(</span>new_file<span class="token punctuation">,</span> return_text<span class="token punctuation">)</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;New File: {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>new_file<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;File does not exist&quot;</span><span class="token punctuation">)</span>\n\n\n</code></pre></div>',17);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
