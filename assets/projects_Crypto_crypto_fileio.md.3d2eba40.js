import{o as n,c as s,a}from"./app.5202dc78.js";const t='{"title":"If there is not an extension, try and open it with a set of extensions","description":"","frontmatter":{},"relativePath":"projects/Crypto/crypto/fileio.md","lastUpdated":1617051445748}',e={},p=a('<p>PROJECT : Crypto FILE : <a href="http://fileio.py" target="_blank" rel="noopener noreferrer">fileio.py</a> PROGRAMMER : Samuel Lagunju DATE : 2020-08-07 DESCRIPTION : The functions in this file are used to</p><div class="language-python"><pre><code>\n<span class="token keyword">import</span> os\n\navailable_extensions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.pdf&quot;</span><span class="token punctuation">]</span>\n\n\n</code></pre></div><p>FUNCTION : open_file DESCRIPTION : This function opens an existing file PARAMETERS : new_input - User input used to create a file object RETURNS : obj_file - A file object that contains methods and attributes which latter can be used to retrieve information or manipulate the file that was just opened</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">open_file</span><span class="token punctuation">(</span>new_input<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    obj_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>new_input<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> obj_file\n\n\n</code></pre></div><p>FUNCTION : read_file DESCRIPTION : This function reads an existing file and extract its content PARAMETERS : input_file - Input file used for reading RETURNS : file_buffer - Content in the file, each line separated accordingly</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span>input_file<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    file_buffer <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_pointer<span class="token punctuation">:</span>\n        <span class="token keyword">for</span> cnt<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>file_pointer<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            file_buffer <span class="token operator">+=</span> line\n    <span class="token keyword">return</span> file_buffer\n\n\n\n</code></pre></div><p>FUNCTION : write_file DESCRIPTION : This function writes content to an existing file PARAMETERS : output_file - Output file used for writing content - Content in the file, each line separated accordingly RETURNS : N/A</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">write_file</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_pointer<span class="token punctuation">:</span>\n        file_pointer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n\n\n\n</code></pre></div><p>FUNCTION: validate_file DESCRIPTION: Checking if a file exists Also checks if the file exists with other extensions PARAMETERS: File - Input file RETURNS: valid_status - If the file exist, it returns true If the file does not exist, it returns false</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">validate_file</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    valid_status <span class="token operator">=</span> <span class="token boolean">False</span>\n    file_name<span class="token punctuation">,</span> ext <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n\n</code></pre></div><p>THIS IS AN IDEA FOR ANOTHER TIME - YOU NEED TO CREATE A NEW INPUT with an &#39;accepted&#39; extension</p><h1 id="if-there-is-not-an-extension-try-and-open-it-with-a-set-of-extensions"><a class="header-anchor" href="#if-there-is-not-an-extension-try-and-open-it-with-a-set-of-extensions" aria-hidden="true">#</a> If there is not an extension, try and open it with a set of extensions</h1><p>if not ext: for curr_test_extension in available_extensions: valid_status = os.path.exists(file_name + curr_test_extension) if valid_status: break</p><div class="language-python"><pre><code>    <span class="token keyword">if</span> ext<span class="token punctuation">:</span>\n        valid_status <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> valid_status\n\n\n</code></pre></div><p>FUNCTION : check_write DESCRIPTION : This function checks if the content in the file were properly written the first time PARAMETERS : file_buffer - Content in the file, each line separated accordingly file - File being verified RETURNS : IOError - If there is an issue, this exception is raised.</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">check_write</span><span class="token punctuation">(</span>file_buffer<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n</code></pre></div><p>Write to the file first</p><div class="language-python"><pre><code>    write_file<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> file_buffer<span class="token punctuation">)</span>\n\n\n</code></pre></div><p>Open the written file</p><div class="language-python"><pre><code>    file_content <span class="token operator">=</span> read_file<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n\n\n</code></pre></div><p>Compare file content with file_buffer</p><div class="language-python"><pre><code>    <span class="token keyword">if</span> file_buffer <span class="token operator">!=</span> file_content<span class="token punctuation">:</span>\n        <span class="token keyword">raise</span> IOError\n\n\n\n</code></pre></div><p>FUNCTION : convert_ext DESCRIPTION : This function converts the extension of a file PARAMETERS : file - Name of file and its extension RETURNS : new_file - Name of the file with its new extension</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">convert_ext</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    file_name<span class="token punctuation">,</span> ext <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> ext <span class="token operator">==</span> <span class="token string">&quot;.txt&quot;</span><span class="token punctuation">:</span>\n        new_file <span class="token operator">=</span> file_name <span class="token operator">+</span> <span class="token string">&quot;.crp&quot;</span>\n        os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> new_file<span class="token punctuation">)</span>\n    <span class="token keyword">elif</span> ext <span class="token operator">==</span> <span class="token string">&quot;.crp&quot;</span><span class="token punctuation">:</span>\n        new_file <span class="token operator">=</span> file_name <span class="token operator">+</span> <span class="token string">&quot;.txt&quot;</span>\n        os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> new_file<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> new_file\n\n\n</code></pre></div>',24);e.render=function(a,t,e,o,i,c){return n(),s("div",null,[p])};export default e;export{t as __pageData};
