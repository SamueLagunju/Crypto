import{o as n,c as s,d as a}from"./app.50dbb70a.js";const t='{"title":"If there is not an extension, try and open it with a set of extensions","description":"","frontmatter":{},"relativePath":"projects/Crypto/crypto/fileio.md","lastUpdated":1619852461563}',e={},p=a('<p>PROJECT : Crypto FILE : <a href="http://fileio.py" target="_blank" rel="noopener noreferrer">fileio.py</a> PROGRAMMER : Samuel Lagunju DATE : 2020-08-07 DESCRIPTION : The functions in this file are used to</p><div class="language-python"><pre><code>\n<span class="token keyword">import</span> os\n<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image\n\navailable_extensions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.jpeg&quot;</span><span class="token punctuation">]</span>\n\n\n\n</code></pre></div><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">file_deconstruct</span><span class="token punctuation">(</span>valid_files<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    file_stems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    file_extensions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    file_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    \n    <span class="token keyword">for</span> valid_file <span class="token keyword">in</span> valid_files<span class="token punctuation">:</span>\n        file_stem<span class="token punctuation">,</span> file_extension <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>valid_file<span class="token punctuation">)</span>\n        file_stems<span class="token punctuation">.</span>append<span class="token punctuation">(</span>file_stem<span class="token punctuation">)</span>\n        file_extensions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>file_extension<span class="token punctuation">)</span>\n        file_names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>valid_file<span class="token punctuation">)</span>\n        \n    <span class="token keyword">return</span> <span class="token punctuation">(</span>file_stems<span class="token punctuation">,</span> file_extensions<span class="token punctuation">,</span> file_names<span class="token punctuation">)</span>\n\n\n\n</code></pre></div><p>FUNCTION : open_file DESCRIPTION : This function opens an existing file PARAMETERS : new_input - User input used to create a file object RETURNS : obj_file - A file object that contains methods and attributes which latter can be used to retrieve information or manipulate the file that was just opened</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">open_file</span><span class="token punctuation">(</span>new_input<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    obj_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>new_input<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> obj_file\n\n\n\n</code></pre></div><p>FUNCTION : read_file DESCRIPTION : This function reads an existing file and extract its content PARAMETERS : input_file - Input file used for reading RETURNS : file_buffer - Content in the file, each line separated accordingly</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">read_binary_file</span><span class="token punctuation">(</span>input_file<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_pointer<span class="token punctuation">:</span>\n        file_buffer <span class="token operator">=</span> file_pointer<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre></div><p>for cnt, line in enumerate(file_pointer): file_buffer += line</p><div class="language-python"><pre><code>    <span class="token keyword">return</span> file_buffer\n\n\n\n</code></pre></div><p>FUNCTION : read_text_file DESCRIPTION : This function reads an existing file and extract its content PARAMETERS : input_file - Input file used for reading RETURNS : file_buffer - Content in the file, each line separated accordingly</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">read_text_file</span><span class="token punctuation">(</span>input_file<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    file_buffer <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_pointer<span class="token punctuation">:</span>\n        <span class="token keyword">for</span> cnt<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>file_pointer<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            file_buffer <span class="token operator">+=</span> line\n    <span class="token keyword">return</span> file_buffer\n\n\n\n</code></pre></div><p>FUNCTION : write_text_file DESCRIPTION : This function writes content to an existing text file PARAMETERS : output_file - Output file used for writing content - Content in the file, each line separated accordingly RETURNS : N/A</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">write_text_file</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_pointer<span class="token punctuation">:</span>\n        file_pointer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n\n\n\n</code></pre></div><p>FUNCTION : write_binary_file DESCRIPTION : This function writes content to an existing binary file PARAMETERS : output_file - Output file used for writing content - Content in the file, each line separated accordingly RETURNS : N/A</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">write_binary_file</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_pointer<span class="token punctuation">:</span>\n        file_pointer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n\n\n\n</code></pre></div><p>FUNCTION: validate_file DESCRIPTION: Checking if a file exists Also checks if the file exists with other extensions PARAMETERS: File - Input file RETURNS: valid_status - If the file exist, it returns true If the file does not exist, it returns false</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">validate_file</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    valid_status <span class="token operator">=</span> <span class="token boolean">False</span>\n    file_name<span class="token punctuation">,</span> ext <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n\n</code></pre></div><p>THIS IS AN IDEA FOR ANOTHER TIME - YOU NEED TO CREATE A NEW INPUT with an &#39;accepted&#39; extension</p><h1 id="if-there-is-not-an-extension-try-and-open-it-with-a-set-of-extensions"><a class="header-anchor" href="#if-there-is-not-an-extension-try-and-open-it-with-a-set-of-extensions" aria-hidden="true">#</a> If there is not an extension, try and open it with a set of extensions</h1><p>if not ext: for curr_test_extension in available_extensions: valid_status = os.path.exists(file_name + curr_test_extension) if valid_status: break</p><div class="language-python"><pre><code>    <span class="token keyword">if</span> ext<span class="token punctuation">:</span>\n        valid_status <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> valid_status\n\n\n\n</code></pre></div><p>FUNCTION : read_image DESCRIPTION : This function reads an existing image and extract its content PARAMETERS : input_file - Input file used for reading RETURNS : image_buffer - Content in the image, an image object</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">read_image</span><span class="token punctuation">(</span>input_file<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    image_buffer <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>input_file<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> image_buffer\n\n\n\n</code></pre></div><p>FUNCTION : write_text_file DESCRIPTION : This function writes content to an existing text file PARAMETERS : output_file - Output file used for writing content - Content in the file, each line separated accordingly RETURNS : N/A</p><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">write_image</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>\n    outImg <span class="token operator">=</span> Image<span class="token punctuation">.</span>frombytes<span class="token punctuation">(</span><span class="token string">&#39;RGBA&#39;</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token string">&#39;raw&#39;</span><span class="token punctuation">)</span>\n    outImg<span class="token punctuation">.</span>save<span class="token punctuation">(</span>output_file<span class="token punctuation">)</span>\n\n\n</code></pre></div>',25);e.render=function(a,t,e,o,i,c){return n(),s("div",null,[p])};export default e;export{t as __pageData};
